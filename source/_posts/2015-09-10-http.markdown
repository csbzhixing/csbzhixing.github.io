---
layout: post
title: "HTTP学习"
date: 2015-09-10 23:46:08 +0800
comments: true
categories: Network
---
#HTTP学习
HTTP协议是网络中最广泛的协议之一，对HTTP协议的了解应该是每一个和网络打交道的程序员必须具备的技能。很多公司面试都要求对网络知识有一定的了解，一个是TCP/IP协议，一个就是HTTP协议，HTTP协议应用层的协议，内容比较少，这周花时间去总结了一下，做一个备忘。
##HTTP简单分析
HTTP是一个基于请求/响应模式的、无状态的协议。即，浏览器与服务端连接之后，浏览器向服务器发送一个请求，服务器返回响应信息之后，双方的链接就被关闭。

HTTP1.0是典型的请求/响应模式。

HTTP1.1在1.0的基础上进行了改进，加入了“持续连接”的机制。通过这种机制，客户端发送请求得到响应后，连接不会马上关闭，可以继续发送请求，还可以流水线发送多个请求、而不用等待每一个响应的到来。

* URI和URL + URL我们应该是很熟悉的了，全名是统一资源定位符，包含了需要查找的信息的资源。 + 而URI是URL的父集，纯粹是一个WEB的资源符号

  ## HTTP请求

![HTTP Request](http://i3.tietuku.com/2c834f74cd465d7e.png)


简单的来说 HTTP请求可以分为三部分


1. 请求行2. 消息报头3. 请求正文

###请求行


***

请求行主要的内容是是请求方法和请求的位置（URL）

请求方法主要有以下几种方法（注意方法都是全部字母大写）

![HTTP Request method](http://i3.tietuku.com/05fa7108f6959f91.png)

在APP中，最多用的到的就是POST 和 GET 两种方法。许多地方都要求区别两者的区别，所以在这里做一下重点笔记对比两者方法的不同

（在这里小小的吐槽，在学校计算机网络的学习中，POST和GET的区别基本就是一句话：POST比GET更好更安全。其实在查阅了许多资料后，发现并没有那么简单）

***

####POST

 + 根据HTTP规范，POST表示可能修改服务器上的资源的请求，比如提交表格，注册等等都是常用POST

  + POST将请求的正文包在HTTP包体中

  + POST没有大小限制

 ***
 
####GET

 + GET操作，根据HTTP规范，仅仅用于信息获取，而且是应该是安全的幂等。
  + GET操作会将请求的数据附在URL后面，参数之间以&相连（这就是为什么很多人认为GET不安全了）

  + GET的数据限制，由于浏览器或者服务器可能会对URL存在长度限制，所以有可能会产生影响

 通过对比，我们发现常见的误区有两个

1. POST比GET更安全。通过上面对比，我们发现，虽然POST没有将参数直接放在URL中，但是通过抓包的手段，我们依然可以获得HTTP包体中的参数。由此看来，想依靠POST就简单保证安全是不可能的。

2. POST能比GET传输更多。通过上面的叙述也可以得知，其实HTTP协议本身没有进行限制，POST和GET都没有大小限制，而是第三方的浏览器和服务器造成了差别

什么时候用POST，什么时候用GET，我们要依据不同的使用场景来区分。如果有缓存的需求，那自然就不能用POST方法。如果必须要用表格，GET也不行了。

## HTTP响应

请求响应类似与请求。如图所示

可以看到，HTTP响应的第一行叫状态行，包含了HTTP版本，状态码，状态描述信息。

状态码是判断请求状态的重要标志，由三位数字组成，有五种定义：


1. 1XX ---- 请示信息，表示请求已经接受，可以继续处理
2. 2XX ---- 成功状态，表示请求被服务器接受
3. 3XX ---- 重定向，要完成请求的话需要更进一步的操作
4. 4XX ---- 客户端错误，请求错误或者请求无法被实现
5. 5XX ---- 服务器端错误，服务器未能完成合法的请求

全部取值如下：

>		 100——客户必须继续发出请求
	   101——客户要求服务器根据请求转换HTTP协议版本
		
	
>		  200——交易成功
		201——提示知道新文件的URL
		202——接受和处理、但处理未完成
		203——返回信息不确定或不完整
		204——请求收到，但返回信息为空
		205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
		206——服务器已经完成了部分用户的GET请求
		
> 		  300——请求的资源可在多处得到
		301——删除请求数据
		302——在其他地址发现了请求数据
		303——建议客户访问其他URL或访问方式
		304——客户端已经执行了GET，但文件未变化
		305——请求的资源必须从服务器指定的地址得到
		306——前一版本HTTP中使用的代码，现行版本中不再使用
		307——申明请求的资源临时性删除
		
>		  400——错误请求，如语法错误
		401——请求授权失败
		402——保留有效ChargeTo头响应
		403——请求不允许
		404——没有发现文件、查询或URl
		405——用户在Request-Line字段定义的方法不允许
		406——根据用户发送的Accept拖，请求资源不可访问
		407——类似401，用户必须首先在代理服务器上得到授权
		408——客户端没有在用户指定的饿时间内完成请求
		409——对当前资源状态，请求不能完成
		410——服务器上不再有此资源且无进一步的参考地址
		411——服务器拒绝用户定义的Content-Length属性请求
		412——一个或多个请求头字段在当前请求中错误
		413——请求的资源大于服务器允许的大小
		414——请求的资源URL长于服务器允许的长度
		415——请求资源不支持请求项目格式
		416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
		417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求
		
>  		  500——服务器产生内部错误
		501——服务器不支持请求的函数
		502——服务器暂时不可用，有时是为了防止发生系统过载
		503——服务器过载或暂停维修
		504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长
		505——服务器不支持或拒绝支请求头中指定的HTTP版本
	
 常见的错误主要有400 404 403 500 503等等

相应正文，包含了请求获得的资源，有HTML文件，JSON格式数据，文件的URL等等

### 消息报头

*** 

HTTP请求和HTTP响应都有消息报头。而消息报头是由众多报头域组成。每一个报头域都由名字＋“：”＋空格组成，消息报头域的名字是大小写无关的。

HTTP消息报头包括普通报头、请求报头、响应报头和实体报头。

***

####  普通报头：

在普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。

常见的普通报头：

1）Cache-Control

	Cache-Control用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。

	请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、max-age、max-stale、min-fresh、only-if-cached;
	响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage.

2）Date

	Date普通报头域表示消息产生的日期和时间

3）Connection

	Connection普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接

 ***

#### 	请求报头

请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。
（在APP中，一些身份验证的信息可能需要在header中添加）


常见的请求报头：

1)Accept

	Accept请求报头域用于指定客户端接受哪些类型的信息。

2)Accept-Charset

	Accept-Charset请求报头域用于指定客户端接受的字符集。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。

3）Accept-Encoding

	Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。

4）Accept-Language

	Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。

5）Authorization

	Authorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。

6）Host

	发送请求时，该报头域是必需的。Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。

7）User-Agent


	User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。

 ***

####  响应报头
 

响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。


常见的实体报头：

1）Location

	Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。

2）Server

	Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。

3）WWW-Authenticate

	WWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。

*** 

#### 实体报头

请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。

实体报头包括：



常见的实体报头：

1）Content-Encoding

	Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding主要用于记录文档的压缩方法。

2）Content-Language

	Content-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言
阅读者。

3）Content-Length

	Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。即一个数字字符占一个字节，用其对应的ASCII码来存储传输。

4）Content-Type

	Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。

5）Expires

	Expires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。

6）Last-Modified

	Last-Modified实体报头域用于指示资源的最后修改日期和时间。

##总结

HTTP协议的内容不是多，常用的内容就几个，但是需要非常熟悉，因为HTTP协议是网络交互重要的协议之一。

接下来花一些时间去回顾TCP/IP协议，内容多就会有几篇文章来记录学习的一些笔记心得。
  

